@model IEnumerable<RMS.Models.TableViewModel>

@{
    ViewData["Title"] = "Quản lý bàn";
}

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <h2 class="text-2xl font-bold text-gray-800">Quản lý bàn</h2>
        <div class="flex gap-2">
            <a asp-action="Create" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                <i class="fas fa-plus mr-2"></i>Thêm bàn mới
            </a>
            <button onclick="saveLayout()" class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                <i class="fas fa-save mr-2"></i>Lưu bố cục
            </button>
        </div>
    </div>

    <!-- Restaurant Map -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Restaurant Layout -->
            <div class="space-y-4">
                <!-- Layout Controls -->
                <div class="flex gap-4 mb-4">
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-green-100 border-2 border-green-500"></div>
                        <span class="text-sm">Bàn trống</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-red-100 border-2 border-red-500"></div>
                        <span class="text-sm">Bàn đang sử dụng</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-blue-100 border-2 border-blue-500"></div>
                        <span class="text-sm">Khu vực phục vụ</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-yellow-100 border-2 border-yellow-500"></div>
                        <span class="text-sm">Lối vào/ra</span>
                    </div>
                </div>

                <!-- Grid Layout -->
                <div class="relative bg-gray-100 rounded-lg p-4">
                    <div id="restaurantGrid" class="grid grid-cols-20 gap-1 aspect-square">
                        <!-- Grid cells will be generated by JavaScript -->
                    </div>
                </div>

                <!-- Available Tables -->
                <div class="mt-4">
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Bàn có sẵn</h3>
                    <div class="grid grid-cols-4 gap-2" id="availableTables">
                        @foreach (var table in Model)
                        {
                            var statusClass = table.Status == RMS.Data.Entities.Table.TableStatus.Available 
                                ? "bg-green-100 border-green-500" 
                                : "bg-red-100 border-red-500";
                            
                            <div class="table-item aspect-square rounded-lg border-2 @statusClass p-2 flex flex-col items-center justify-center cursor-move"
                                 draggable="true"
                                 data-table-id="@table.Id"
                                 data-table-number="@table.TableNumber"
                                 data-table-capacity="@table.Capacity"
                                 data-table-status="@((int)table.Status)">
                                <div class="text-sm font-bold">@table.TableNumber</div>
                                <div class="text-xs text-gray-600">@table.Capacity chỗ</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Table Details -->
            <div class="bg-gray-50 rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Thông tin bàn</h3>
                <div id="tableDetails" class="space-y-4">
                    <p class="text-gray-500 text-center py-8">Chọn một bàn để xem chi tiết</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Table List -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead>
                <tr class="bg-gradient-to-r from-blue-50 to-blue-100">
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Mã bàn</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Sức chứa</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Trạng thái</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Vị trí</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Hành động</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var table in Model)
                {
                    <tr class="hover:bg-blue-50 transition-colors duration-200">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">@table.TableNumber</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@table.Capacity chỗ</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            @if (table.Status == RMS.Data.Entities.Table.TableStatus.Available)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <i class="fas fa-check-circle mr-1"></i>Trống
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <i class="fas fa-users mr-1"></i>Đang sử dụng
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <span class="table-position" data-table-id="@table.Id">-</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            <div class="flex gap-2">
                                <a asp-action="Edit" asp-route-id="@table.Id" class="inline-flex items-center px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors duration-200">
                                    <i class="fas fa-edit mr-1.5"></i>Sửa
                                </a>
                                <a asp-action="Delete" asp-route-id="@table.Id" class="inline-flex items-center px-3 py-1.5 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors duration-200">
                                    <i class="fas fa-trash mr-1.5"></i>Xóa
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize grid
        const gridSize = 20;
        const grid = document.getElementById('restaurantGrid');
        const tablePositions = new Map();

        // Create grid cells
        for (let i = 0; i < gridSize * gridSize; i++) {
            const cell = document.createElement('div');
            cell.className = 'grid-cell bg-white border border-gray-200 aspect-square';
            cell.dataset.x = i % gridSize;
            cell.dataset.y = Math.floor(i / gridSize);
            cell.addEventListener('dragover', handleDragOver);
            cell.addEventListener('drop', handleDrop);
            cell.addEventListener('dragenter', handleDragEnter);
            cell.addEventListener('dragleave', handleDragLeave);
            grid.appendChild(cell);
        }

        // Drag and drop handlers
        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handleDragEnter(e) {
            e.preventDefault();
            const cell = e.target.closest('.grid-cell');
            if (cell && !cell.classList.contains('has-table')) {
                cell.classList.add('drag-over');
            }
        }

        function handleDragLeave(e) {
            e.preventDefault();
            const cell = e.target.closest('.grid-cell');
            if (cell) {
                cell.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            const tableId = e.dataTransfer.getData('text/plain');
            const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
            const cell = e.target.closest('.grid-cell');
            
            if (tableElement && cell) {
                // Remove drag-over class
                cell.classList.remove('drag-over');

                // Remove table from previous position
                const oldCell = document.querySelector(`.grid-cell[data-table-id="${tableId}"]`);
                if (oldCell) {
                    oldCell.removeAttribute('data-table-id');
                    oldCell.classList.remove('has-table');
                    oldCell.innerHTML = '';
                }

                // Place table in new position
                cell.setAttribute('data-table-id', tableId);
                cell.classList.add('has-table');
                
                // Update position in the map
                const x = parseInt(cell.dataset.x);
                const y = parseInt(cell.dataset.y);
                tablePositions.set(tableId, { x, y });
                
                // Update position display in table list
                const positionDisplay = document.querySelector(`.table-position[data-table-id="${tableId}"]`);
                if (positionDisplay) {
                    positionDisplay.textContent = `(${x + 1}, ${y + 1})`;
                }

                // Create new table element for the grid
                const tableClone = document.createElement('div');
                tableClone.className = 'table-grid-item w-full h-full cursor-pointer';
                tableClone.dataset.tableId = tableId;
                tableClone.dataset.tableNumber = tableElement.dataset.tableNumber;
                tableClone.dataset.tableCapacity = tableElement.dataset.tableCapacity;
                tableClone.dataset.tableStatus = tableElement.dataset.tableStatus;
                tableClone.draggable = true;
                
                // Add status-based background color
                const status = parseInt(tableElement.dataset.tableStatus);
                if (status === 1) {
                    tableClone.classList.add('bg-green-100', 'border-green-500');
                } else {
                    tableClone.classList.add('bg-red-100', 'border-red-500');
                }
                tableClone.classList.add('border-2', 'rounded-lg');
                
                // Add table content
                tableClone.innerHTML = `
                    <div class="text-sm font-bold">${tableElement.dataset.tableNumber}</div>
                    <div class="text-xs text-gray-600">${tableElement.dataset.tableCapacity} chỗ</div>
                `;
                
                // Add event listeners
                tableClone.addEventListener('click', () => showTableDetails(tableId));
                tableClone.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', tableId);
                    e.dataTransfer.effectAllowed = 'move';
                    tableClone.classList.add('dragging');
                });
                tableClone.addEventListener('dragend', () => {
                    tableClone.classList.remove('dragging');
                });
                
                // Place the new table in the cell
                cell.innerHTML = '';
                cell.appendChild(tableClone);

                // Remove table from available tables section if it's a new placement
                if (tableElement.closest('#availableTables')) {
                    tableElement.remove();
                }

                // Show table details after moving
                showTableDetails(tableId);
            }
        }

        // Initialize draggable tables
        function initializeDraggableTables() {
            document.querySelectorAll('.table-item').forEach(table => {
                table.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', table.dataset.tableId);
                    e.dataTransfer.effectAllowed = 'move';
                    table.classList.add('dragging');
                });
                table.addEventListener('dragend', (e) => {
                    e.target.classList.remove('dragging');
                });
            });
        }

        // Call initialization when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeDraggableTables();
            loadLayout();
        });

        // Save layout
        function saveLayout() {
            const layout = Array.from(tablePositions.entries()).map(([tableId, position]) => ({
                tableId,
                x: position.x,
                y: position.y
            }));

            fetch('/Tables/SaveLayout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(layout)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Đã lưu bố cục thành công!');
                } else {
                    alert('Có lỗi xảy ra khi lưu bố cục!');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi lưu bố cục!');
            });
        }

        // Load saved layout
        function loadLayout() {
            fetch('/Tables/GetLayout', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(layout => {
                layout.forEach(item => {
                    const cell = document.querySelector(`.grid-cell[data-x="${item.x}"][data-y="${item.y}"]`);
                    if (cell) {
                        const tableElement = document.querySelector(`[data-table-id="${item.tableId}"]`);
                        if (tableElement) {
                            cell.setAttribute('data-table-id', item.tableId);
                            cell.classList.add('has-table');
                            const tableClone = tableElement.cloneNode(true);
                            tableClone.classList.add('w-full', 'h-full', 'cursor-pointer');
                            tableClone.addEventListener('click', () => showTableDetails(item.tableId));
                            cell.innerHTML = '';
                            cell.appendChild(tableClone);
                            
                            // Update position in the map
                            tablePositions.set(item.tableId, { x: item.x, y: item.y });
                            
                            // Update position display
                            const positionDisplay = document.querySelector(`.table-position[data-table-id="${item.tableId}"]`);
                            if (positionDisplay) {
                                positionDisplay.textContent = `(${item.x + 1}, ${item.y + 1})`;
                            }

                            // Remove table from available tables section
                            const availableTable = document.querySelector(`#availableTables [data-table-id="${item.tableId}"]`);
                            if (availableTable) {
                                availableTable.remove();
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading layout:', error));
        }

        // Table details function
        function showTableDetails(id) {
            fetch(`/Tables/Details/${id}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(table => {
                const detailsHtml = `
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Mã bàn:</span>
                            <span class="font-semibold">${table.tableNumber}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Sức chứa:</span>
                            <span class="font-semibold">${table.capacity} chỗ</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Trạng thái:</span>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                table.status === 1 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-red-100 text-red-800'
                            }">
                                <i class="fas ${table.status === 1 ? 'fa-check-circle' : 'fa-users'} mr-1"></i>
                                ${table.status === 1 ? 'Trống' : 'Đang sử dụng'}
                            </span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Vị trí:</span>
                            <span class="font-semibold">${tablePositions.get(table.id) ? 
                                `(${tablePositions.get(table.id).x + 1}, ${tablePositions.get(table.id).y + 1})` : 
                                'Chưa đặt'}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Ngày tạo:</span>
                            <span class="font-semibold">${new Date(table.createdAt).toLocaleDateString()}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Cập nhật lần cuối:</span>
                            <span class="font-semibold">${new Date(table.updatedAt).toLocaleDateString()}</span>
                        </div>
                        <div class="pt-4 flex gap-2">
                            <a href="/Tables/Edit/${table.id}" class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                                <i class="fas fa-edit mr-2"></i>Sửa
                            </a>
                            <a href="/Tables/Delete/${table.id}" class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
                                <i class="fas fa-trash mr-2"></i>Xóa
                            </a>
                        </div>
                    </div>
                `;
                document.getElementById('tableDetails').innerHTML = detailsHtml;
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('tableDetails').innerHTML = '<p class="text-red-500 text-center py-8">Không thể tải thông tin bàn</p>';
            });
        }
    </script>

    <style>
        .grid-cols-20 {
            grid-template-columns: repeat(20, minmax(0, 1fr));
        }
        
        .grid-cell {
            position: relative;
            transition: all 0.2s;
        }
        
        .grid-cell:hover {
            background-color: #f3f4f6;
        }
        
        .grid-cell.has-table {
            background-color: #f0f9ff;
        }

        .grid-cell.drag-over {
            background-color: #e0f2fe;
            border: 2px dashed #3b82f6;
        }
        
        .table-item {
            transition: all 0.2s;
            user-select: none;
        }
        
        .table-item:hover {
            transform: scale(1.05);
        }

        .table-item.dragging {
            opacity: 0.5;
            transform: scale(0.95);
        }

        .table-grid-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 0.25rem;
            font-size: 0.875rem;
            line-height: 1.25rem;
            transition: all 0.2s;
            user-select: none;
        }

        .table-grid-item:hover {
            transform: scale(1.05);
        }

        .table-grid-item .text-sm {
            font-weight: 600;
            color: #1f2937;
        }

        .table-grid-item .text-xs {
            color: #6b7280;
        }
    </style>
}
