@model IEnumerable<RMS.Models.TableViewModel>
@{
    ViewData["Title"] = "Quản lý bàn";
}

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <h2 class="text-2xl font-bold text-gray-800">Quản lý bàn</h2>
        <div class="flex gap-2">
            <button type="button" onclick="openCreateTableModal()" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                <i class="fas fa-plus mr-2"></i>Thêm bàn mới
            </button>

            <button onclick="saveLayout()" class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                <i class="fas fa-save mr-2"></i>Lưu bố cục
            </button>
        </div>
    </div>

    <!-- Restaurant Map -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div class="grid grid-cols-12 gap-8">
            <!-- Restaurant Layout -->
            <div class="col-span-8 space-y-4">
                <!-- Layout Controls -->
                <div class="flex flex-wrap gap-4 mb-4">
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-green-100 border-2 border-green-500"></div>
                        <span class="text-sm">Bàn trống</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-red-100 border-2 border-red-500"></div>
                        <span class="text-sm">Bàn đang sử dụng</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-blue-100 border-2 border-blue-500"></div>
                        <span class="text-sm">Khu vực phục vụ</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-yellow-100 border-2 border-yellow-500"></div>
                        <span class="text-sm">Lối vào/ra</span>
                    </div>
                </div>

                <!-- Grid Layout -->
                <div class="bg-gray-100 rounded-lg p-6">
                    <!-- Entrance Area -->
                    <div class="flex justify-center mb-6">
                        <div class="bg-yellow-100 border-2 border-yellow-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                            <div>
                                <i class="fas fa-door-open text-lg mb-1"></i>
                                <div class="text-xs font-medium text-yellow-800">Lối vào</div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Grid Area -->
                    <div class="flex gap-4">
                        <!-- Left Service Areas -->
                        <div class="flex flex-col gap-4">
                            <!-- Kitchen/Service Area -->
                            <div class="bg-blue-100 border-2 border-blue-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                                <div>
                                    <i class="fas fa-utensils text-lg mb-1"></i>
                                    <div class="text-xs font-medium text-blue-800">Bếp</div>
                                </div>
                            </div>
                            <!-- POS/Payment Area -->
                            <div class="bg-purple-100 border-2 border-purple-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                                <div>
                                    <i class="fas fa-cash-register text-lg mb-1"></i>
                                    <div class="text-xs font-medium text-purple-800">POS</div>
                                </div>
                            </div>
                        </div>

                        <!-- Responsive square wrapper -->
                        <div class="relative w-full max-w-[600px] mx-auto" style="aspect-ratio: 1 / 1;">
                            <div id="restaurantGrid" class="grid grid-cols-5 gap-2 w-full h-full absolute inset-0">
                                <!-- Grid cells will be generated by JavaScript -->
                            </div>
                        </div>

                        <!-- Floating available tables list for empty grid cells -->
                        <div id="floatingTableList"
                             style="display:none; position:absolute; z-index:50;"
                             class="bg-white rounded-lg shadow-lg border p-2">
                            <!-- List will be populated by JS -->
                        </div>

                        <!-- Right Service Areas -->
                        <div class="flex flex-col gap-4">
                            <!-- WC Area -->
                            <div class="bg-green-100 border-2 border-green-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                                <div>
                                    <i class="fas fa-restroom text-lg mb-1"></i>
                                    <div class="text-xs font-medium text-green-800">WC</div>
                                </div>
                            </div>
                            <!-- Exit Area -->
                            <div class="bg-red-100 border-2 border-red-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                                <div>
                                    <i class="fas fa-sign-out-alt text-lg mb-1"></i>
                                    <div class="text-xs font-medium text-red-800">Lối ra</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Bottom Service Areas -->
                    <div class="flex justify-center gap-4 mt-6">
                        <!-- Bar Area -->
                        <div class="bg-indigo-100 border-2 border-indigo-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                            <div>
                                <i class="fas fa-glass-martini-alt text-lg mb-1"></i>
                                <div class="text-xs font-medium text-indigo-800">Bar</div>
                            </div>
                        </div>
                        <!-- Storage Area -->
                        <div class="bg-gray-100 border-2 border-gray-500 rounded-lg w-24 h-24 flex items-center justify-center text-center">
                            <div>
                                <i class="fas fa-warehouse text-lg mb-1"></i>
                                <div class="text-xs font-medium text-gray-800">Kho</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Available Tables -->
                <div class="mt-4">
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Bàn có sẵn</h3>
                    <div class="grid grid-cols-4 gap-2" id="availableTables">
                        @foreach (var table in Model)
                        {
                            var statusClass = table.Status == RMS.Data.Entities.Table.TableStatus.Available 
                                ? "bg-green-100 border-green-500" 
                                : "bg-red-100 border-red-500";
                            
                            <div class="table-item aspect-square rounded-lg border-2 @statusClass p-2 flex flex-col items-center justify-center cursor-move hover:shadow-lg transition-all duration-200"
                                 draggable="true"
                                 data-table-id="@table.Id"
                                 data-table-number="@table.TableNumber"
                                 data-table-capacity="@table.Capacity"
                                 data-table-status="@((int)table.Status)">
                                <div class="text-sm font-bold">@table.TableNumber</div>
                                <div class="text-xs text-gray-600">@table.Capacity chỗ</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Table Details -->
            <div class="col-span-4 bg-gray-50 rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Thông tin bàn</h3>
                <div id="tableDetails" class="space-y-4">
                    <p class="text-gray-500 text-center py-8">Chọn một bàn để xem chi tiết</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Table List -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead>
                <tr class="bg-gradient-to-r from-blue-50 to-blue-100">
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Mã bàn</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Sức chứa</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Trạng thái</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Vị trí</th>
                    <th class="px-6 py-4 text-left text-xs font-semibold text-blue-700 uppercase tracking-wider">Hành động</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var table in Model)
                {
                    <tr class="hover:bg-blue-50 transition-colors duration-200">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">@table.TableNumber</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@table.Capacity chỗ</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            @if (table.Status == RMS.Data.Entities.Table.TableStatus.Available)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <i class="fas fa-check-circle mr-1"></i>Trống
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <i class="fas fa-users mr-1"></i>Đang sử dụng
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <span class="table-position" data-table-id="@table.Id">-</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                            <div class="flex gap-2">
                                <a asp-action="Edit" asp-route-id="@table.Id" class="inline-flex items-center px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors duration-200">
                                    <i class="fas fa-edit mr-1.5"></i>Sửa
                                </a>
                                <a asp-action="Delete" asp-route-id="@table.Id" class="inline-flex items-center px-3 py-1.5 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors duration-200">
                                    <i class="fas fa-trash mr-1.5"></i>Xóa
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal for Creating Table -->
    <div id="createTableModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
            <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl" onclick="closeCreateTableModal()">&times;</button>
            <h3 class="text-lg font-semibold mb-4">Thêm bàn mới</h3>
            <form id="createTableForm" autocomplete="off">
                <div class="mb-3">
                    <label for="TableNumber" class="block font-medium mb-1">Mã bàn</label>
                    <input type="text" id="TableNumber" name="TableNumber" class="form-input w-full border rounded px-3 py-2" required />
                    <span class="text-danger text-sm" id="TableNumberError"></span>
                </div>
                <div class="mb-3">
                    <label for="Capacity" class="block font-medium mb-1">Sức chứa</label>
                    <input type="number" id="Capacity" name="Capacity" class="form-input w-full border rounded px-3 py-2" required min="1" />
                    <span class="text-danger text-sm" id="CapacityError"></span>
                </div>
                <div class="flex justify-end gap-2 mt-4">
                    <button type="button" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300" onclick="closeCreateTableModal()">Hủy</button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Tạo mới</button>
                </div>
                <div class="text-red-600 text-sm mt-2" id="createTableError"></div>
            </form>
        </div>
    </div>

</div>

@Html.Partial("~/Views/Orders/_OrderForm.cshtml", new RMS.Models.OrderViewModel(), new ViewDataDictionary(ViewData))

@section Scripts {
    <script src="~/js/order.js"></script>
    <script src="~/js/ingredient_stock_check.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Initialize grid
        const gridSize = 5;
        const grid = document.getElementById('restaurantGrid');
        const tablePositions = new Map();

        // Create grid cells
        for (let i = 0; i < gridSize * gridSize; i++) {
            const cell = document.createElement('div');
            cell.className = 'grid-cell bg-white border border-gray-200 aspect-square';
            cell.dataset.x = i % gridSize;
            cell.dataset.y = Math.floor(i / gridSize);
            cell.addEventListener('dragover', handleDragOver);
            cell.addEventListener('drop', handleDrop);
            cell.addEventListener('dragenter', handleDragEnter);
            cell.addEventListener('dragleave', handleDragLeave);
            grid.appendChild(cell);
        }

        // Drag and drop handlers
        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handleDragEnter(e) {
            e.preventDefault();
            const cell = e.target.closest('.grid-cell');
            if (cell && !cell.classList.contains('has-table')) {
                cell.classList.add('drag-over');
            }
        }

        function handleDragLeave(e) {
            e.preventDefault();
            const cell = e.target.closest('.grid-cell');
            if (cell) {
                cell.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            try {
                e.preventDefault();
                const tableId = e.dataTransfer.getData('text/plain');
                // Find the table element - either in grid or available tables
                const tableElement = document.querySelector(`.table-grid-item[data-table-id="${tableId}"]`) || 
                                   document.querySelector(`.table-item[data-table-id="${tableId}"]`);
                const cell = e.target.closest('.grid-cell');
                
                if (!tableElement || !cell || cell.classList.contains('has-table')) {
                    return;
                }

                // Remove drag-over class
                cell.classList.remove('drag-over');

                // Get table data from the source element
                const tableData = {
                    id: tableElement.dataset.tableId,
                    number: tableElement.dataset.tableNumber,
                    capacity: tableElement.dataset.tableCapacity,
                    status: tableElement.dataset.tableStatus
                };

                // Validate table data
                if (!tableData.id || !tableData.number || !tableData.capacity || !tableData.status) {
                    console.error('Invalid table data:', tableData);
                    return;
                }

                // Remove table from previous position if exists
                const oldCell = document.querySelector(`.grid-cell[data-table-id="${tableId}"]`);
                if (oldCell) {
                    oldCell.removeAttribute('data-table-id');
                    oldCell.classList.remove('has-table');
                    oldCell.innerHTML = '';
                }

                // Place table in new position
                cell.setAttribute('data-table-id', tableId);
                cell.classList.add('has-table');
                
                // Update position in the map
                const x = parseInt(cell.dataset.x);
                const y = parseInt(cell.dataset.y);
                tablePositions.set(tableId, { x, y });
                
                // Update position display in table list
                const positionDisplay = document.querySelector(`.table-position[data-table-id="${tableId}"]`);
                if (positionDisplay) {
                    positionDisplay.textContent = `(${x + 1}, ${y + 1})`;
                }

                // Create new table element for the grid
                const tableClone = document.createElement('div');
                tableClone.className = 'table-grid-item w-full h-full cursor-pointer';
                tableClone.dataset.tableId = tableData.id;
                tableClone.dataset.tableNumber = tableData.number;
                tableClone.dataset.tableCapacity = tableData.capacity;
                tableClone.dataset.tableStatus = tableData.status;
                tableClone.draggable = true;
                
                // Add status-based background color
                const status = parseInt(tableData.status);
                if (status === 1) {
                    tableClone.classList.add('bg-green-100', 'border-green-500');
                } else {
                    tableClone.classList.add('bg-red-100', 'border-red-500');
                }
                tableClone.classList.add('border-2', 'rounded-lg');
                
                // Add table content
                tableClone.innerHTML = `
                    <div class="text-sm font-bold">${tableData.number}</div>
                    <div class="text-xs text-gray-600">${tableData.capacity} chỗ</div>
                    <button class="return-to-available mt-1 text-xs text-blue-600 hover:text-blue-800" onclick="returnTableToAvailable('${tableData.id}')">
                        <i class="fas fa-undo"></i> Trả về
                    </button>
                `;
                
                // Add event listeners
                tableClone.addEventListener('click', (e) => {
                    if (!e.target.closest('.return-to-available')) {
                        showTableDetails(tableData.id);
                    }
                });
                tableClone.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', tableData.id);
                    e.dataTransfer.effectAllowed = 'move';
                    tableClone.classList.add('dragging');
                });
                tableClone.addEventListener('dragend', () => {
                    tableClone.classList.remove('dragging');
                });
                
                // Place the new table in the cell
                cell.innerHTML = '';
                cell.appendChild(tableClone);

                // Remove table from available tables section if it's a new placement
                if (tableElement.closest('#availableTables')) {
                    tableElement.remove();
                }

                // Show table details after moving
                showTableDetails(tableData.id);
            } catch (error) {
                console.error('Error in handleDrop:', error);
                throw error;
            }
        }

        // Initialize grid cells with click handler
        function initializeGridCells() {
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.addEventListener('click', function() {
                    if (!cell.classList.contains('has-table')) {
                        showAvailableTablesMenu(cell);
                    }
                });
            });
        }

        // Show available tables menu
        function showAvailableTablesMenu(cell) {
            const availableTables = getAvailableTables();
            if (availableTables.length === 0) return;

            // Remove any existing menu first
            const existingMenu = document.querySelector('#floatingTableList');
            if (existingMenu) {
                existingMenu.remove();
            }

            // Create menu element
            const menu = document.createElement('div');
            menu.id = 'floatingTableList';
            menu.className = 'absolute z-50 bg-white rounded-lg shadow-lg border p-2';
            menu.style.minWidth = '180px';

            // Build menu content
            let html = '<div class="text-sm font-semibold mb-2">Chọn bàn để đặt:</div>';
            availableTables.forEach(table => {
                html += `
                    <div class="table-option flex items-center gap-2 mb-1 cursor-pointer rounded hover:bg-gray-100 px-2 py-1"
                         data-table-id="${table.tableId}">
                        <span class="inline-flex items-center justify-center w-6 h-6 rounded-full border border-green-500 bg-white text-green-600 mr-1">
                            <i class="fas fa-plus"></i>
                        </span>
                        <span class="font-mono">${table.tableNumber} (${table.capacity} chỗ)</span>
                    </div>
                `;
            });
            menu.innerHTML = html;

            // Position menu
            const rect = cell.getBoundingClientRect();
            menu.style.top = `${window.scrollY + rect.top}px`;
            menu.style.left = `${window.scrollX + rect.right + 10}px`;

            // Add click handlers
            menu.querySelectorAll('.table-option').forEach(option => {
                option.onclick = function(e) {
                    e.stopPropagation();
                    const tableId = option.dataset.tableId;
                    placeTableInCell(tableId, cell);
                    menu.remove();
                };
            });

            // Add click outside handler
            const clickOutsideHandler = function(e) {
                if (!menu.contains(e.target) && e.target !== cell) {
                    if (menu.parentNode) {
                        menu.remove();
                    }
                    document.removeEventListener('click', clickOutsideHandler);
                }
            };
            document.addEventListener('click', clickOutsideHandler);

            // Add menu to body
            document.body.appendChild(menu);
        }

        // Place table in cell
        function placeTableInCell(tableId, cell) {
            try {
                const tableElement = document.querySelector(`#availableTables [data-table-id="${tableId}"]`);
                if (!tableElement || cell.classList.contains('has-table')) return;

                // Create a synthetic drag event
                const dragEvent = new DragEvent('drop', {
                    bubbles: true,
                    cancelable: true,
                    dataTransfer: new DataTransfer()
                });
                dragEvent.dataTransfer.setData('text/plain', tableId);
                
                // Set the target element
                Object.defineProperty(dragEvent, 'target', {
                    value: cell
                });
                
                // Trigger the drop handler
                return handleDrop(dragEvent);
            } catch (error) {
                console.error('Error in placeTableInCell:', error);
                throw error;
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', () => {
            try {
                initializeGridCells();
                loadLayout();
            } catch (error) {
                console.error('Error initializing page:', error);
            }
        });

        // Function to return table to available seats
        function returnTableToAvailable(tableId) {
            try {
                const cell = document.querySelector(`.grid-cell[data-table-id="${tableId}"]`);
                if (!cell) return;

                const tableElement = cell.querySelector('.table-grid-item');
                if (!tableElement) return;

                // Create new table for available section
                const newTable = document.createElement('div');
                newTable.className = 'table-item aspect-square rounded-lg border-2 p-2 flex flex-col items-center justify-center cursor-move hover:shadow-lg transition-all duration-200';
                newTable.draggable = true;
                
                // Copy all data attributes
                newTable.dataset.tableId = tableElement.dataset.tableId;
                newTable.dataset.tableNumber = tableElement.dataset.tableNumber;
                newTable.dataset.tableCapacity = tableElement.dataset.tableCapacity;
                newTable.dataset.tableStatus = tableElement.dataset.tableStatus;
                
                // Add status-based background color
                const status = parseInt(tableElement.dataset.tableStatus);
                if (status === 1) {
                    newTable.classList.add('bg-green-100', 'border-green-500');
                } else {
                    newTable.classList.add('bg-red-100', 'border-red-500');
                }
                
                // Add table content
                newTable.innerHTML = `
                    <div class="text-sm font-bold">${tableElement.dataset.tableNumber}</div>
                    <div class="text-xs text-gray-600">${tableElement.dataset.tableCapacity} chỗ</div>
                `;
                
                // Add event listeners
                newTable.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', tableId);
                    e.dataTransfer.effectAllowed = 'move';
                    newTable.classList.add('dragging');
                });
                newTable.addEventListener('dragend', () => {
                    newTable.classList.remove('dragging');
                });
                
                // Add to available tables section
                document.getElementById('availableTables').appendChild(newTable);
                
                // Remove from grid
                cell.removeAttribute('data-table-id');
                cell.classList.remove('has-table');
                cell.innerHTML = '';
                
                // Update position display
                const positionDisplay = document.querySelector(`.table-position[data-table-id="${tableId}"]`);
                if (positionDisplay) {
                    positionDisplay.textContent = '-';
                }
                
                // Remove from positions map
                tablePositions.delete(tableId);
            } catch (error) {
                console.error('Error in returnTableToAvailable:', error);
                throw error;
            }
        }

        // Helper to get available tables
        function getAvailableTables() {
            return Array.from(document.querySelectorAll('#availableTables .table-item')).map(table => ({
                tableId: table.dataset.tableId,
                tableNumber: table.dataset.tableNumber,
                capacity: table.dataset.tableCapacity,
                status: table.dataset.tableStatus
            }));
        }

        // Save layout
        function saveLayout() {
            try {
                // Get all tables in the grid
                const gridTables = Array.from(tablePositions.entries()).map(([tableId, position]) => {
                    // Find the table element in the grid
                    const cell = document.querySelector(`.grid-cell[data-table-id="${tableId}"]`);
                    if (!cell) return null;

                    const tableElement = cell.querySelector('.table-grid-item');
                    if (!tableElement) return null;

                    // Get table data from the element
                    const tableData = {
                        tableId: parseInt(tableId),
                        tableNumber: tableElement.dataset.tableNumber,
                        capacity: parseInt(tableElement.dataset.tableCapacity),
                        status: parseInt(tableElement.dataset.tableStatus),
                        x: position.x,
                        y: position.y,
                        isInGrid: true
                    };

                    // Validate table data
                    if (!tableData.tableNumber || !tableData.capacity || typeof tableData.status !== 'number') {
                        console.error('Invalid table data:', tableData);
                        return null;
                    }

                    return tableData;
                }).filter(table => table !== null);

                // Get all tables in available seats
                const availableTables = Array.from(document.querySelectorAll('#availableTables .table-item')).map(table => {
                    const tableData = {
                        tableId: parseInt(table.dataset.tableId),
                        tableNumber: table.dataset.tableNumber,
                        capacity: parseInt(table.dataset.tableCapacity),
                        status: parseInt(table.dataset.tableStatus),
                        x: null,
                        y: null,
                        isInGrid: false
                    };

                    // Validate table data
                    if (!tableData.tableNumber || !tableData.capacity || typeof tableData.status !== 'number') {
                        console.error('Invalid available table data:', tableData);
                        return null;
                    }

                    return tableData;
                }).filter(table => table !== null);

                // Combine both arrays
                const layout = [...gridTables, ...availableTables];

                // Log layout data for debugging
                console.log('Saving layout:', layout);

                // Validate layout data
                if (!layout.every(table => 
                    table && 
                    table.tableId && 
                    table.tableNumber && 
                    table.capacity && 
                    typeof table.status === 'number' &&
                    typeof table.isInGrid === 'boolean'
                )) {
                    console.error('Invalid layout data:', layout);
                    throw new Error('Invalid layout data');
                }

                return fetch('/Tables/SaveLayout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(layout)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.message || 'Failed to save layout');
                    }
                    showSuccessNotification('Đã lưu bố cục thành công!');
                    console.log('Layout saved successfully');
                })
                .catch(error => {
                    console.error('Error saving layout:', error);
                    throw error;
                });
            } catch (error) {
                console.error('Error in saveLayout:', error);
                throw error;
            }
        }

        // Load saved layout
        function loadLayout() {
            fetch('/Tables/GetLayout', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(layout => {
                // Clear existing grid and available tables
                document.querySelectorAll('.grid-cell').forEach(cell => {
                    cell.removeAttribute('data-table-id');
                    cell.classList.remove('has-table');
                    cell.innerHTML = '';
                });
                document.getElementById('availableTables').innerHTML = '';
                tablePositions.clear();

                // First, create all available tables
                layout.forEach(item => {
                    // Create new table for available section
                    const newTable = document.createElement('div');
                    newTable.className = 'table-item aspect-square rounded-lg border-2 p-2 flex flex-col items-center justify-center cursor-move hover:shadow-lg transition-all duration-200';
                    newTable.draggable = true;
                    
                    // Set data attributes
                    newTable.dataset.tableId = item.tableId;
                    newTable.dataset.tableNumber = item.tableNumber;
                    newTable.dataset.tableCapacity = item.capacity;
                    newTable.dataset.tableStatus = item.status;
                    
                    // Add status-based background color
                    if (item.status === 1) {
                        newTable.classList.add('bg-green-100', 'border-green-500');
                    } else {
                        newTable.classList.add('bg-red-100', 'border-red-500');
                    }
                    
                    // Add table content
                    newTable.innerHTML = `
                        <div class="text-sm font-bold">${item.tableNumber}</div>
                        <div class="text-xs text-gray-600">${item.capacity} chỗ</div>
                    `;
                    
                    // Add event listeners
                    newTable.addEventListener('dragstart', (e) => {
                        e.dataTransfer.setData('text/plain', item.tableId);
                        e.dataTransfer.effectAllowed = 'move';
                        newTable.classList.add('dragging');
                    });
                    newTable.addEventListener('dragend', () => {
                        newTable.classList.remove('dragging');
                    });

                    // Add to available tables section
                    document.getElementById('availableTables').appendChild(newTable);
                });

                // Then, place tables in grid if they have positions
                layout.forEach(item => {
                    if (item.isInGrid && item.x !== null && item.y !== null) {
                        const cell = document.querySelector(`.grid-cell[data-x="${item.x}"][data-y="${item.y}"]`);
                        if (cell) {
                            cell.setAttribute('data-table-id', item.tableId);
                            cell.classList.add('has-table');
                            
                            // Create new table element for the grid
                            const tableClone = document.createElement('div');
                            tableClone.className = 'table-grid-item w-full h-full cursor-pointer';
                            
                            // Set data attributes
                            tableClone.dataset.tableId = item.tableId;
                            tableClone.dataset.tableNumber = item.tableNumber;
                            tableClone.dataset.tableCapacity = item.capacity;
                            tableClone.dataset.tableStatus = item.status;
                            tableClone.draggable = true;
                            
                            // Add status-based background color
                            if (item.status === 1) {
                                tableClone.classList.add('bg-green-100', 'border-green-500');
                            } else {
                                tableClone.classList.add('bg-red-100', 'border-red-500');
                            }
                            tableClone.classList.add('border-2', 'rounded-lg');
                            
                            // Add table content
                            tableClone.innerHTML = `
                                <div class="text-sm font-bold">${item.tableNumber}</div>
                                <div class="text-xs text-gray-600">${item.capacity} chỗ</div>
                                <button class="return-to-available mt-1 text-xs text-blue-600 hover:text-blue-800" onclick="returnTableToAvailable('${item.tableId}')">
                                    <i class="fas fa-undo"></i> Trả về
                                </button>
                            `;
                            
                            // Add event listeners
                            tableClone.addEventListener('click', (e) => {
                                if (!e.target.closest('.return-to-available')) {
                                    showTableDetails(item.tableId);
                                }
                            });
                            tableClone.addEventListener('dragstart', (e) => {
                                e.dataTransfer.setData('text/plain', item.tableId);
                                e.dataTransfer.effectAllowed = 'move';
                                tableClone.classList.add('dragging');
                            });
                            tableClone.addEventListener('dragend', () => {
                                tableClone.classList.remove('dragging');
                            });
                            
                            // Place the new table in the cell
                            cell.innerHTML = '';
                            cell.appendChild(tableClone);
                            
                            // Update position in the map
                            tablePositions.set(item.tableId, { x: item.x, y: item.y });
                            
                            // Update position display
                            const positionDisplay = document.querySelector(`.table-position[data-table-id="${item.tableId}"]`);
                            if (positionDisplay) {
                                positionDisplay.textContent = `(${item.x + 1}, ${item.y + 1})`;
                            }

                            // Remove from available tables section
                            const availableTable = document.querySelector(`#availableTables [data-table-id="${item.tableId}"]`);
                            if (availableTable) {
                                availableTable.remove();
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading layout:', error));
        }

        // Table details function
        function showTableDetails(id) {
            fetch(`/Tables/Details/${id}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(table => {
                const detailsHtml = `
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Mã bàn:</span>
                            <span class="font-semibold">${table.tableNumber}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Sức chứa:</span>
                            <span class="font-semibold">${table.capacity} chỗ</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Trạng thái:</span>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                table.status === 1 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-red-100 text-red-800'
                            }">
                                <i class="fas ${table.status === 1 ? 'fa-check-circle' : 'fa-users'} mr-1"></i>
                                ${table.status === 1 ? 'Trống' : 'Đang sử dụng'}
                            </span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Vị trí:</span>
                            <span class="font-semibold">${tablePositions.get(table.id) ? 
                                `(${tablePositions.get(table.id).x + 1}, ${tablePositions.get(table.id).y + 1})` : 
                                'Chưa đặt'}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Ngày tạo:</span>
                            <span class="font-semibold">${new Date(table.createdAt).toLocaleDateString()}</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Cập nhật lần cuối:</span>
                            <span class="font-semibold">${new Date(table.updatedAt).toLocaleDateString()}</span>
                        </div>
                        ${table.currentOrder ? `
                            <div class="mt-4 p-4 bg-blue-50 rounded-lg">
                                <h4 class="text-sm font-semibold text-blue-800 mb-2">Thông tin Order hiện tại</h4>
                                <div class="space-y-2">
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-blue-600">Mã Order:</span>
                                        <span class="text-sm font-medium">#${table.currentOrder.orderNumber}</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-blue-600">SĐT khách hàng:</span>
                                        <span class="text-sm font-medium">${table.currentOrder.customerPhone || 'Chưa có'}</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-blue-600">Thời gian tạo:</span>
                                        <span class="text-sm font-medium">${new Date(table.currentOrder.createdAt).toLocaleString()}</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-blue-600">Trạng thái:</span>
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                                            table.currentOrder.status === 'Ready' ? 'bg-green-100 text-green-800' :
                                            table.currentOrder.status === 'Processing' ? 'bg-yellow-100 text-yellow-800' :
                                            'bg-blue-100 text-blue-800'
                                        }">
                                            ${table.currentOrder.status}
                                        </span>
                                    </div>
                                    <div class="mt-2">
                                        <div class="text-sm font-medium text-blue-800 mb-1">Chi tiết món:</div>
                                        <div class="space-y-1">
                                            ${table.currentOrder.items.map(item => `
                                                <div class="flex justify-between items-center text-sm">
                                                    <span class="text-gray-600">${item.dishName} x${item.quantity}</span>
                                                    <span class="font-medium">${(item.price).toLocaleString('vi-VN')}đ</span>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                    ${table.currentOrder.note ? `
                                        <div class="mt-2">
                                            <div class="text-sm font-medium text-blue-800 mb-1">Ghi chú:</div>
                                            <div class="text-sm text-gray-600">${table.currentOrder.note}</div>
                                        </div>
                                    ` : ''}
                                    <div class="flex justify-between items-center mt-2 pt-2 border-t border-blue-100">
                                        <span class="text-sm font-medium text-blue-800">Tổng tiền:</span>
                                        <span class="text-sm font-bold text-blue-900">${table.currentOrder.totalAmount.toLocaleString('vi-VN')}đ</span>
                                    </div>
                                    <div class="mt-3 flex gap-2">
                                        <button onclick="showOrderDetail(${table.currentOrder.id})" 
                                           class="flex-1 inline-flex items-center justify-center px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                                            <i class="fas fa-eye mr-1.5"></i>Xem chi tiết
                                        </button>
                                        <button onclick="editOrder(${table.currentOrder.id})" 
                                           class="flex-1 inline-flex items-center justify-center px-3 py-1.5 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                                            <i class="fas fa-edit mr-1.5"></i>Sửa Order
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                        <div class="pt-4 flex gap-2">
                            ${table.status === 1 ? `
                                <button onclick="openOrderModal(${table.id})" 
                                        class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                                    <i class="fas fa-plus mr-2"></i>Tạo Order mới
                                </button>
                            ` : ''}
                            <a href="/Tables/Edit/${table.id}" 
                               class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                                <i class="fas fa-edit mr-2"></i>Sửa
                            </a>
                            <a href="/Tables/Delete/${table.id}" 
                               class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
                                <i class="fas fa-trash mr-2"></i>Xóa
                            </a>
                        </div>
                    </div>
                `;
                document.getElementById('tableDetails').innerHTML = detailsHtml;
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('tableDetails').innerHTML = '<p class="text-red-500 text-center py-8">Không thể tải thông tin bàn</p>';
            });
        }

        // Function to open order modal with pre-selected table
        function openOrderModal(tableId) {
            // Set the table ID in the form
            document.getElementById('TableId').value = tableId;
            // Show the modal
            document.getElementById('orderModal').style.display = 'flex';
        }

        // Connect to the SignalR hub
        const orderConnection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        // Listen for the OrderStatusChanged event
        orderConnection.on("OrderStatusChanged", function (data) {
            if (data.status == "Ready") {
                toastr.success("Đơn hàng #" + data.OrderId + " đã nấu xong, sẵn sàng phục vụ!");
            } else {
                toastr.info("Đơn hàng #" + data.OrderId + " đang được chế biến.");
            }            
        });

        orderConnection.start().catch(function (err) {
            console.error(err.toString());
        });

        // Show modal for creating a new table
        function openCreateTableModal() {
            document.getElementById('createTableModal').classList.remove('hidden');
            document.getElementById('createTableForm').reset();
            document.getElementById('createTableError').textContent = '';
            document.getElementById('TableNumberError').textContent = '';
            document.getElementById('CapacityError').textContent = '';
        }
        function closeCreateTableModal() {
            document.getElementById('createTableModal').classList.add('hidden');
        }

        // AJAX form submit
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('createTableForm');
            if (form) {
                form.onsubmit = function (e) {
                    e.preventDefault();
                    document.getElementById('createTableError').textContent = '';
                    document.getElementById('TableNumberError').textContent = '';
                    document.getElementById('CapacityError').textContent = '';

                    const data = {
                        TableNumber: form.TableNumber.value,
                        Capacity: form.Capacity.value
                    };

                    fetch('/Tables/CreateAjax', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(data)
                    })
                    .then(async response => {
                        if (response.ok) {
                            // Optionally, reload the table list or grid via AJAX here
                            closeCreateTableModal();
                            // Reload page or call your loadLayout() to refresh UI
                            if (typeof loadLayout === 'function') loadLayout();
                        } else if (response.status === 400) {
                            // Validation error
                            const result = await response.json();
                            if (result.errors) {
                                if (result.errors.TableNumber) {
                                    document.getElementById('TableNumberError').textContent = result.errors.TableNumber[0];
                                }
                                if (result.errors.Capacity) {
                                    document.getElementById('CapacityError').textContent = result.errors.Capacity[0];
                                }
                            } else if (result.message) {
                                document.getElementById('createTableError').textContent = result.message;
                            }
                        } else {
                            document.getElementById('createTableError').textContent = 'Có lỗi xảy ra khi tạo bàn mới.';
                        }
                    })
                    .catch(() => {
                        document.getElementById('createTableError').textContent = 'Có lỗi xảy ra khi tạo bàn mới.';
                    });
                };
            }
        });

        // Add success notification function
        function showSuccessNotification(message) {
            // Create notification container if it doesn't exist
            let container = document.getElementById('notification-container');
            if (!container) {
                container = document.createElement('div');
                container.id = 'notification-container';
                container.className = 'fixed top-4 right-4 z-50';
                document.body.appendChild(container);
            }

            // Create notification element
            const notification = document.createElement('div');
            notification.className = 'bg-white rounded-lg shadow-lg p-4 mb-4 relative overflow-hidden';
            notification.style.minWidth = '300px';
            notification.style.maxWidth = '400px';

            // Add content
            notification.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-green-500 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                </div>
                <div class="absolute bottom-0 left-0 h-1 bg-green-500 w-full"></div>
            `;

            // Add to container
            container.appendChild(notification);

            // Get the progress bar element
            const progressBar = notification.querySelector('.h-1');

            // Start progress bar animation
            requestAnimationFrame(() => {
                progressBar.style.transition = 'width 3s linear';
                progressBar.style.width = '0%';
            });

            // Remove notification after animation completes
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                notification.style.transition = 'all 0.3s ease-out';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Add styles for notification
        const style = document.createElement('style');
        style.textContent = `
            #notification-container {
                display: flex;
                flex-direction: column;
                align-items: flex-end;
            }
            #notification-container > div {
                transition: all 0.3s ease-out;
            }
            .h-1 {
                transition: width 3s linear;
            }
        `;
        document.head.appendChild(style);

    </script>

    <style>
        .grid-cols-5 {
            grid-template-columns: repeat(5, minmax(0, 1fr));
        }
        
        .grid-cell {
            position: relative;
            transition: all 0.2s;
            min-height: 100px;
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .grid-cell:hover {
            background-color: #f3f4f6;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .grid-cell.has-table {
            background-color: #f0f9ff;
        }

        .grid-cell.drag-over {
            background-color: #e0f2fe;
            border: 2px dashed #3b82f6;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
        }
        
        .table-item {
            transition: all 0.2s;
            user-select: none;
        }
        
        .table-item:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .table-item.dragging {
            opacity: 0.5;
            transform: scale(0.95);
        }

        .table-grid-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 0.5rem;
            font-size: 1rem;
            line-height: 1.5rem;
            transition: all 0.2s;
            user-select: none;
            height: 100%;
            width: 100%;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .table-grid-item:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .table-grid-item .text-sm {
            font-weight: 600;
            color: #1f2937;
            font-size: 1.25rem;
        }

        .table-grid-item .text-xs {
            color: #6b7280;
            font-size: 1rem;
        }

        /* Add some decorative elements */
        .grid-cell::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 0.5rem;
            pointer-events: none;
            transition: all 0.2s;
        }

        .grid-cell:hover::before {
            box-shadow: inset 0 0 0 2px rgba(59, 130, 246, 0.2);
        }

        #floatingTableList {
            min-width: 180px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.15);
            pointer-events: auto;
            background: #fff;
        }
        .floating-table-option {
            transition: background 0.15s;
        }
        .floating-table-option .fa-plus {
            font-size: 1rem;
        }
        .floating-table-option span:first-child {
            background: #fff;
            border: 1.5px solid #22c55e;
            color: #22c55e;
        }

        .grid-cell {
            width: 100%;
            height: 100%;
            aspect-ratio: 1 / 1;
            /* ...rest of your styles */
        }
    </style>
}
