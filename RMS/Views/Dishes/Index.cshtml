@model IEnumerable<RMS.Models.DishViewModel>
@using System.ComponentModel.DataAnnotations
@using RMS.Data.Entities

@{
    ViewData["Title"] = "Quản lý thực đơn";
    var dishTypes = Enum.GetValues(typeof(Dish.DishType));
}

@functions{
    string GetEnumDisplayName(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attr = (DisplayAttribute)Attribute.GetCustomAttribute(field, typeof(DisplayAttribute));
        return attr?.Name ?? value.ToString();
    }
}

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <h2 class="text-2xl font-bold">Quản lý thực đơn</h2>
        <div class="flex gap-2 w-full md:w-auto">
            <div class="relative flex-1">
                <input type="text" id="menu-search" placeholder="Tìm kiếm món..." class="border border-gray-300 rounded px-3 py-2 pr-10 w-full text-base">
                <i class="fas fa-search absolute top-3 right-3 text-gray-400"></i>
            </div>
            <button id="add-menu-item-btn" class="bg-primary hover:bg-secondary text-white px-4 py-2 rounded">
                <i class="fas fa-plus mr-2"></i>Thêm món mới
            </button>
        </div>
    </div>
    <div class="mb-4 flex flex-wrap gap-2">
        <button class="menu-filter px-3 py-1 rounded transition bg-primary text-white" data-category="all">Tất cả</button>
        @foreach (var type in dishTypes)
        {
            <button class="menu-filter px-3 py-1 rounded transition bg-gray-100 text-gray-600" data-category="@type">
                @GetEnumDisplayName((RMS.Data.Entities.Dish.DishType)type)
            </button>
        }
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" id="menu-items-container">
        @foreach (var item in Model)
        {
            <div class="card bg-white shadow rounded-lg overflow-hidden border border-light-border flex flex-col menu-item-card" data-category="@item.Type" data-name="@item.Name.ToLower() @item.Description.ToLower()">
                <div class="h-48 bg-gray-100 relative">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-full object-cover">
                    }
                    else
                    {
                        <div class="w-full h-full flex items-center justify-center bg-gradient-to-r from-blue-300 to-purple-300">
                            <span class="text-3xl font-bold text-white">@item.Name.Substring(0,1)</span>
                        </div>
                    }
                    <span class="absolute top-2 right-2 px-2 py-1 rounded-full text-xs font-medium bg-white bg-opacity-75">
                        @GetEnumDisplayName(item.Type)
                    </span>
                </div>
                <div class="p-4 flex-1 flex flex-col">
                    <div class="flex justify-between items-start mb-2">
                        <h3 class="font-bold">@item.Name</h3>
                        <span class="text-sm font-medium px-2 py-1 rounded-full bg-green-100 text-green-800">@item.Price.ToString("N0") VNĐ</span>
                    </div>
                    <p class="text-gray-600 text-sm mb-2">@item.Description</p>
                    <div class="flex justify-between items-center mt-auto">
                        <span class="text-xs text-gray-500">@string.Join(", ", item.Ingredients.Select(i => i.IngredientName))</span>
                        <div>
                            <button type="button" class="edit-menu-item text-blue-600 hover:text-blue-800 mr-2" data-id="@item.Id">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="delete-menu-item text-red-600 hover:text-red-800" data-id="@item.Id">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal -->
<div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div id="modal-container" class="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto"></div>
</div>

@section Scripts {
<script>
    // Filtering and search
    function filterMenu() {
        var search = document.getElementById('menu-search').value.toLowerCase();
        var category = document.querySelector('.menu-filter.bg-primary, .menu-filter.text-white')?.dataset.category || 'all';
        document.querySelectorAll('.menu-item-card').forEach(function(card) {
            var name = card.dataset.name;
            var cat = card.dataset.category;
            var show = (category === 'all' || cat === category) && (!search || name.includes(search));
            card.style.display = show ? '' : 'none';
        });
    }
    document.getElementById('menu-search').addEventListener('input', filterMenu);
    document.querySelectorAll('.menu-filter').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.menu-filter').forEach(b => b.classList.remove('bg-primary', 'text-white'));
            document.querySelectorAll('.menu-filter').forEach(b => b.classList.add('bg-gray-100', 'text-gray-600'));
            this.classList.remove('bg-gray-100', 'text-gray-600');
            this.classList.add('bg-primary', 'text-white');
            filterMenu();
        });
    });

    // Modal logic
    function openModal(title, dish) {
        var modal = document.getElementById('modal-overlay');
        var container = document.getElementById('modal-container');
        var isEdit = !!dish;
        var ingredients = @Html.Raw(Json.Serialize((ViewData["Ingredients"] as IEnumerable<SelectListItem>)?.Select(i => new { value = i.Value, text = i.Text })));
        var dishIngredients = dish ? dish.Ingredients : [];
        
        // Store the dish type for later use and ensure it's a number
        var dishType = dish ? parseInt(dish.type) : null;
        
        container.innerHTML = `
            <div class="flex justify-between items-center px-6 py-4 border-b">
                <h3 class="text-xl font-bold">${isEdit ? 'Sửa món' : 'Thêm món mới'}</h3>
                <button id="modal-close" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
            </div>
            <form id="dish-form" class="p-6 space-y-4" action="${isEdit ? '/Dishes/EditJson/' + (dish ? dish.id : '') : '/Dishes/CreateJson'}" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" name="Id" value="${dish ? dish.id : ''}">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-1">Tên món</label>
                        <input type="text" name="Name" class="w-full border rounded px-3 py-2 text-base" value="${dish ? dish.name : ''}" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-1">Giá (VND)</label>
                        <input type="number" name="Price" class="w-full border rounded px-3 py-2 text-base" min="0" value="${dish ? dish.price : ''}" required>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Mô tả</label>
                    <textarea name="Description" class="w-full border rounded px-3 py-2 text-base" rows="2">${dish ? dish.description : ''}</textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Loại</label>
                    <select name="Type" id="dish-type" class="w-full border rounded px-3 py-2 text-base" required>
                        <option value="">Chọn loại</option>
                        @foreach (Dish.DishType type in dishTypes)
                        {
                            <option value="@((int)type)">@GetEnumDisplayName(type)</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Ảnh minh họa</label>
                    <input type="file" name="ImageFile" accept="image/*" class="w-full border rounded px-3 py-2 text-base">
                    ${dish && dish.imageUrl ? `<img src="${dish.imageUrl}" alt="Current image" class="mt-2 h-32 object-cover rounded">` : ''}
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Nguyên liệu</label>
                    <div id="ingredients-container" class="space-y-2">
                        ${isEdit && dish.ingredients && dish.ingredients.length > 0 ? 
                            dish.ingredients.map((ingredient, idx) => `
                                <div class="ingredient-row flex space-x-2">
                                    <select name="Ingredients[${idx}].IngredientId" class="ingredient-select flex-1 border rounded px-3 py-2 text-base">
                                        <option value="">Chọn nguyên liệu</option>
                                        ${ingredients.map(i => `<option value="${i.value}" ${i.value == ingredient.ingredientId ? 'selected' : ''}>${i.text}</option>`).join('')}
                                    </select>
                                    <input type="number" name="Ingredients[${idx}].QuantityNeeded" class="ingredient-quantity w-24 border rounded px-3 py-2 text-base" placeholder="Số lượng" min="0" step="0.1" value="${ingredient.quantityNeeded}">
                                    <button type="button" class="remove-ingredient px-2 bg-red-100 text-red-600 rounded"><i class="fas fa-times"></i></button>
                                </div>
                            `).join('') :
                            `<div class="ingredient-row flex space-x-2">
                                <select name="Ingredients[0].IngredientId" class="ingredient-select flex-1 border rounded px-3 py-2 text-base">
                                    <option value="">Chọn nguyên liệu</option>
                                    ${ingredients.map(i => `<option value="${i.value}">${i.text}</option>`).join('')}
                                </select>
                                <input type="number" name="Ingredients[0].QuantityNeeded" class="ingredient-quantity w-24 border rounded px-3 py-2 text-base" placeholder="Số lượng" min="0" step="0.1">
                                <button type="button" class="remove-ingredient px-2 bg-red-100 text-red-600 rounded"><i class="fas fa-times"></i></button>
                            </div>`
                        }
                    </div>
                    <button type="button" id="add-ingredient" class="mt-2 text-sm text-primary"><i class="fas fa-plus mr-1"></i>Thêm nguyên liệu</button>
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="button" id="cancel-dish" class="px-4 py-2 border rounded">Hủy</button>
                    <button type="submit" class="px-4 py-2 bg-primary text-white rounded">${isEdit ? 'Cập nhật' : 'Thêm món'}</button>
                </div>
            </form>
        `;

        modal.classList.remove('hidden');
        
        // Set up event handlers
        document.getElementById('modal-close').onclick = () => modal.classList.add('hidden');
        document.getElementById('cancel-dish').onclick = () => modal.classList.add('hidden');
        
        // Set up ingredient row handlers
        document.querySelectorAll('.remove-ingredient').forEach(btn => {
            btn.onclick = function() { btn.closest('.ingredient-row').remove(); };
        });

        document.getElementById('add-ingredient').onclick = function() {
            var container = document.getElementById('ingredients-container');
            var idx = container.children.length;
            var row = document.createElement('div');
            row.className = 'ingredient-row flex space-x-2';
            row.innerHTML = `
                <select name="Ingredients[${idx}].IngredientId" class="ingredient-select flex-1 border rounded px-3 py-2 text-base">
                    <option value="">Chọn nguyên liệu</option>
                    ${ingredients.map(i => `<option value="${i.value}">${i.text}</option>`).join('')}
                </select>
                <input type="number" name="Ingredients[${idx}].QuantityNeeded" class="ingredient-quantity w-24 border rounded px-3 py-2 text-base" placeholder="Số lượng" min="0" step="0.1">
                <button type="button" class="remove-ingredient px-2 bg-red-100 text-red-600 rounded"><i class="fas fa-times"></i></button>
            `;
            container.appendChild(row);
            row.querySelector('.remove-ingredient').onclick = function() { row.remove(); };
        };

        // Set the Type value after a short delay to ensure the select is rendered
        if (dishType !== null) {
            setTimeout(() => {
                var typeSelect = document.getElementById("dish-type");
                if (typeSelect) {
                    typeSelect.value = dishType.toString();
                }
            }, 0);
        }

        // Add form submit handler
        document.getElementById('dish-form').onsubmit = function(e) {
            e.preventDefault();
            var formData = new FormData(this);
            
            // Get the file input
            var imageFile = formData.get('ImageFile');
            if (imageFile && imageFile.size > 0) {
                // Validate file type
                if (!imageFile.type.startsWith('image/')) {
                    alert('Vui lòng chọn file ảnh hợp lệ');
                    return;
                }
                // Validate file size (max 5MB)
                if (imageFile.size > 5 * 1024 * 1024) {
                    alert('Kích thước file không được vượt quá 5MB');
                    return;
                }
            }

            // Create the model structure
            var model = {
                Id: formData.get('Id') ? parseInt(formData.get('Id')) : 0,
                Name: formData.get('Name'),
                Price: parseFloat(formData.get('Price')),
                Description: formData.get('Description'),
                Type: parseInt(formData.get('Type')),
                ImageUrl: '/images/dishes/default-dish.png', // Set default image URL
                Ingredients: []
            };

            // Process ingredients
            var ingredientRows = document.querySelectorAll('.ingredient-row');
            ingredientRows.forEach((row, index) => {
                var ingredientId = row.querySelector('.ingredient-select').value;
                var quantity = row.querySelector('.ingredient-quantity').value;
                if (ingredientId && quantity) {
                    model.Ingredients.push({
                        IngredientId: parseInt(ingredientId),
                        QuantityNeeded: parseFloat(quantity)
                    });
                }
            });

            var url = model.Id ? `/Dishes/EditJson/${model.Id}` : '/Dishes/CreateJson';
            
            // Create FormData for file upload
            var uploadData = new FormData();
            uploadData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
            uploadData.append('Id', model.Id);
            uploadData.append('Name', model.Name);
            uploadData.append('Price', model.Price);
            uploadData.append('Description', model.Description);
            uploadData.append('Type', model.Type);
            uploadData.append('ImageUrl', model.ImageUrl);
            
            // Add ingredients
            model.Ingredients.forEach((ing, index) => {
                uploadData.append(`Ingredients[${index}].IngredientId`, ing.IngredientId);
                uploadData.append(`Ingredients[${index}].QuantityNeeded`, ing.QuantityNeeded);
            });

            // Add image file if exists
            if (imageFile && imageFile.size > 0) {
                uploadData.append('ImageFile', imageFile);
            }
            
            fetch(url, {
                method: 'POST',
                body: uploadData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errors => {
                        const errorMessages = [];
                        for (const key in errors) {
                            if (Array.isArray(errors[key])) {
                                errorMessages.push(...errors[key]);
                            } else {
                                errorMessages.push(errors[key]);
                            }
                        }
                        throw new Error(errorMessages.join('\n'));
                    });
                }
                return response.json();
            })
            .then(() => {
                window.location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message || 'Có lỗi xảy ra khi lưu món ăn');
            });
        };
    }

    // Update the edit button click handler
    document.querySelectorAll('.edit-menu-item').forEach(btn => {
        btn.onclick = function() {
            var id = btn.dataset.id;
            fetch(`/Dishes/GetDish/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể tải thông tin món ăn');
                    }
                    return response.json();
                })
                .then(dish => {
                    console.log('Dish data:', dish); // Debug log
                    openModal('Sửa món', dish);
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
        };
    });
    document.getElementById('add-menu-item-btn').onclick = function() { openModal('Thêm món mới'); };
    document.querySelectorAll('.delete-menu-item').forEach(btn => {
        btn.onclick = function() {
            if (confirm('Bạn có chắc chắn muốn xóa món này?')) {
                var id = btn.dataset.id;
                fetch(`/Dishes/DeleteJson/${id}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Không thể xóa món ăn');
                    }
                    return response.json();
                })
                .then(() => {
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
            }
        };
    });
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script>
    // Connect to the SignalR hub
    const ingredientConnection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    // Listen for the IngredientChanged event
    ingredientConnection.on("IngredientChanged", function (data) {
        // Phát âm thanh thông báo khi có thay đổi real-time
        const sound = new Audio('/sounds/ingredient-notification.mp3');
        sound.play().catch(error => console.log('Error playing sound:', error));

        // Show a notification or reload the page, as you prefer
        alert("Có nguyên liệu mới hoặc thay đổi nguyên liệu! Vui lòng tải lại trang để cập nhật danh sách nguyên liệu.");
        // Optionally, you can reload automatically:
        //window.location.reload();
    });

    ingredientConnection.start().catch(function (err) {
        return console.error(err.toString());
    });
</script>
}
