@model RMS.Models.DishViewModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Dish</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select asp-for="Type" class="form-control" asp-items="Model.TypeOptions">
                    <option value="">--Select Type--</option>
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <h4>Ingredients</h4>
            <div id="ingredient-list">
                @for (int i = 0; i < Model.Ingredients.Count; i++)
                {
                    <div class="ingredient-item" id="ingredient-@i">
                        <select name="Ingredients[@i].IngredientId" class="form-control">
                            <option value="">Select Ingredient</option>
                            @foreach (var item in (IEnumerable<SelectListItem>)ViewData["Ingredients"])
                            {
                                <option value="@item.Value" selected="@(item.Value == Model.Ingredients[i].IngredientId.ToString())">
                                    @item.Text
                                </option>
                            }
                        </select>
                        <input type="number" name="Ingredients[@i].QuantityNeeded" class="form-control" value="@Model.Ingredients[i].QuantityNeeded" placeholder="Quantity" />
                        <button type="button" class="btn btn-danger" onclick="removeIngredient('ingredient-@i')">Delete</button>
                    </div>
                }
            </div>

            <button type="button" class="btn btn-success" onclick="addIngredient()">Add Ingredient</button>

            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function addIngredient() {
            const container = document.getElementById('ingredient-list');

            let options = `@Html.Raw(Json.Serialize(ViewData["Ingredients"]))`;
            let parsedOptions = JSON.parse(options);
            let optionHtml = parsedOptions.map(ing => `<option value="${ing.value}">${ing.text}</option>`).join('');

            const ingredientIndex = document.querySelectorAll('.ingredient-item').length; // Dynamically calculate index
            const ingredientId = `ingredient-${ingredientIndex}`;

            const html = `
            <div class="ingredient-item" id="${ingredientId}">
                <select name="Ingredients[${ingredientIndex}].IngredientId" class="form-control">
                    <option value="">Select Ingredient</option>
                    ${optionHtml}
                </select>
                <input type="number" name="Ingredients[${ingredientIndex}].QuantityNeeded" class="form-control" placeholder="Quantity" />
                <button type="button" class="btn btn-danger" onclick="removeIngredient('${ingredientId}')">Delete</button>
            </div>`;

            container.insertAdjacentHTML('beforeend', html);
        }

        function removeIngredient(id) {
            const element = document.getElementById(id);
            if (element) {
                element.remove();
                updateIngredientIndexes(); // Recalculate indexes after deletion
            }
        }

        function updateIngredientIndexes() {
            const container = document.getElementById('ingredient-list');
            const ingredientItems = container.getElementsByClassName('ingredient-item');

            for (let i = 0; i < ingredientItems.length; i++) {
                let item = ingredientItems[i];
                item.id = `ingredient-${i}`; // Update ID

                let select = item.querySelector("select");
                let input = item.querySelector("input");
                let button = item.querySelector("button");

                select.name = `Ingredients[${i}].IngredientId`;
                input.name = `Ingredients[${i}].QuantityNeeded`;
                button.setAttribute("onclick", `removeIngredient('ingredient-${i}')`);
            }
        }
    </script>
}
