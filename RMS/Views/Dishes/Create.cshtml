@model RMS.Models.DishViewModel
@using RMS.Data.Entities
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Dish</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select asp-for="Type" class="form-control">
                    <option value="">--Select Type--</option>
                    @foreach (var type in Enum.GetValues(typeof(Dish.DishType)))
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <h4>Ingredients</h4>
            <div id="ingredient-list">
                <div class="ingredient-item">
                    <select name="Ingredients[0].IngredientId" class="form-control">
                        <option value="">Select Ingredient</option>
                        @foreach (var item in (IEnumerable<SelectListItem>)ViewData["Ingredients"])
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                    <input type="number" name="Ingredients[0].QuantityNeeded" class="form-control" placeholder="Quantity" />
                    <button type="button" class="btn btn-danger" onclick="removeIngredient(0)" >Delete</button>
                </div>
            </div>

            <button type="button" onclick="addIngredient()">[+]Add Ingredient</button>

            <button type="submit" class="btn btn-primary mt-3">Create</button>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let ingredientIndex = 1;
        function addIngredient() {
            const container = document.getElementById('ingredient-list');
            let options = `@Html.Raw(Json.Serialize(ViewData["Ingredients"]))`;
            let parsedOptions = JSON.parse(options);
            let optionHtml = parsedOptions.map(ing => `<option value="${ing.value}">${ing.text}</option>`).join('');

            const ingredientId = `ingredient-${ingredientIndex}`; // Unique ID for each ingredient block

            const html = `
            <div class="ingredient-item" id="${ingredientId}">
                <select name="Ingredients[${ingredientIndex}].IngredientId" class="form-control">
                    <option value="">Select Ingredient</option>
                    ${optionHtml}
                </select>
                <input type="number" name="Ingredients[${ingredientIndex}].QuantityNeeded" class="form-control" placeholder="Quantity" />
                <button type="button" class="btn btn-danger" onclick="removeIngredient('${ingredientId}')">Delete</button>
            </div>`;

            container.insertAdjacentHTML('beforeend', html);
            ingredientIndex++;
        }

        function removeIngredient(id) {
            const element = document.getElementById(id);
            if (element) {
                element.remove(); // Removes the ingredient block from the DOM
            }
        }
    </script>
}
