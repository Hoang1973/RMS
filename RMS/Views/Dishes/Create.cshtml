@model RMS.Models.DishViewModel
@using RMS.Data.Entities
@{
    ViewData["Title"] = "Create";
}
<script>
    // Convert ViewData Ingredients to JSON
    var ingredients = @Html.Raw(Json.Serialize(((IEnumerable<SelectListItem>)ViewData["Ingredients"]).Select(i => new
        {
            id = i.Value,
            name = i.Text
        })));
</script>

<h1>Create</h1>

<h4>Dish</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select asp-for="Type" class="form-control">
                    <option value="">--Select Type--</option>
                    @foreach (var type in Enum.GetValues(typeof(Dish.DishType)))
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <h5>Ingredients</h5>
            <div id="ingredient-list">
                <div class="ingredient-item">
                    <select name="Ingredients[0].IngredientId" class="form-control">
                        <option value="">Select Ingredient</option>
                        @foreach (var item in (IEnumerable<SelectListItem>)ViewData["Ingredients"])
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                    <input name="Ingredients[0].QuantityNeeded" class="form-control" placeholder="Quantity" />
                </div>
            </div>


            <button type="button" onclick="addIngredient()">Add More</button>

            <div class="form-group">
                <button type="submit" class="btn btn-success">Create Dish</button>
                @* <input type="submit" value="Create" class="btn btn-primary" /> *@
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let ingredientIndex = 1;
        function addIngredient() {
            const container = document.getElementById('ingredient-list');
            let options = ingredients.map(ing => `<option value="${ing.id}">${ing.name}</option>`).join('');

            const html = `
                <div class="ingredient-item">
                    <select name="Ingredients[${ingredientIndex}].IngredientId" class="form-control">
                        <option value="">Select Ingredient</option>
                        ${options}
                    </select>
                    <input name="Ingredients[${ingredientIndex}].QuantityNeeded" class="form-control" placeholder="Quantity" />
                </div>`;
            container.insertAdjacentHTML('beforeend', html);
            ingredientIndex++;
        }
    </script>
}
