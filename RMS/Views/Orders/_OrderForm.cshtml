@model RMS.Models.OrderViewModel
@using RMS.Data.Entities
@{
    var dishes = ViewData["Dishes"] as IEnumerable<SelectListItem>;
    var tables = ViewData["Tables"] as IEnumerable<SelectListItem>;
    var dishPrices = ViewData["DishPrices"];
}

<div class="modal-bg fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50" id="orderModal" style="display:none;">
    <div class="modal-content bg-white rounded-lg shadow-lg w-full max-w-lg relative p-6">
        <button type="button" class="absolute top-2 right-2 text-2xl text-gray-400 hover:text-gray-700" id="closeOrderModal">×</button>
        <h2 class="text-xl font-bold mb-4">Tạo đơn mới</h2>
        <form id="orderCreateForm" autocomplete="off">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label class="block font-semibold mb-1">Khách hàng</label>
                <input asp-for="CustomerId" class="border px-3 py-2 w-full rounded" placeholder="Nhập mã khách hàng hoặc để trống..." />
            </div>
            <div class="mb-3">
                <label class="block font-semibold mb-1">Chọn bàn</label>
                <select asp-for="TableId" class="border px-3 py-2 w-full rounded">
                    <option value="">-- Chọn bàn --</option>
                    @foreach (var t in tables ?? Enumerable.Empty<SelectListItem>())
                    {
                        <option value="@t.Value">@t.Text</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label class="block font-semibold mb-1">Món ăn</label>
                <div id="dish-list">
                    <div class="dish-item flex gap-2 mb-2" id="dish-0">
                        <select name="Dishes[0].DishId" class="border rounded px-2 py-1 flex-1 dish-select">
                            <option value="">Chọn món ăn</option>
                            @foreach (var d in dishes ?? Enumerable.Empty<SelectListItem>())
                            {
                                <option value="@d.Value">@d.Text</option>
                            }
                        </select>
                        <input type="number" name="Dishes[0].Quantity" class="border rounded px-2 py-1 w-20 dish-quantity" placeholder="Số lượng" min="1" value="1" />
                        <button type="button" class="remove-dish text-red-500 text-xl" data-id="dish-0">×</button>
                    </div>
                </div>
                <button type="button" class="bg-gray-200 px-2 py-1 rounded hover:bg-gray-300 mt-2" id="add-dish">+ Thêm món</button>
            </div>
            <div class="mb-3">
                <label class="block font-semibold mb-1">Ghi chú</label>
                <textarea asp-for="Note" class="border px-3 py-2 w-full rounded" rows="2" placeholder="Nhập ghi chú (nếu có)..."></textarea>
            </div>
            <div class="mb-3">
                <label class="block font-semibold mb-1">Tổng tiền</label>
                <input asp-for="TotalAmount" class="border px-3 py-2 w-full rounded bg-gray-100" id="total-amount" readonly />
            </div>
            <div class="flex justify-end gap-2 mt-4">
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Lưu đơn</button>
                <button type="button" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400" id="cancelOrderModal">Hủy</button>
            </div>
        </form>
    </div>
</div>

@{
    var dishOptions = "";
    foreach (var d in dishes ?? Enumerable.Empty<SelectListItem>())
    {
        dishOptions += $"<option value='{d.Value}'>{d.Text}</option>";
    }
}
<script>
document.addEventListener("DOMContentLoaded", function () {
    let dishIndex = document.querySelectorAll('#dish-list .dish-item').length;
    let dishPrices = @Html.Raw(Json.Serialize(ViewData["DishPrices"] ?? new Dictionary<string, decimal>()));
    let dishOptions = `@Html.Raw(dishOptions)`;

    function updateTotalAmount() {
        let total = 0;
        document.querySelectorAll('.dish-item').forEach(item => {
            const dishId = item.querySelector('select').value;
            const quantity = parseInt(item.querySelector('input').value || 0);
            const price = dishPrices[dishId] || 0;
            total += price * quantity;
        });
        document.getElementById('total-amount').value = total.toFixed(2);
    }

    function updateDishIndexes() {
        const dishItems = document.querySelectorAll('#dish-list .dish-item');
        dishItems.forEach((item, index) => {
            item.id = `dish-${index}`;
            const select = item.querySelector('select');
            const input = item.querySelector('input');
            const button = item.querySelector('button.remove-dish');
            select.name = `Dishes[${index}].DishId`;
            input.name = `Dishes[${index}].Quantity`;
            button.dataset.id = `dish-${index}`;
        });
        dishIndex = dishItems.length;
    }

    function addDish() {
        const container = document.getElementById('dish-list');
        const dishId = `dish-${dishIndex}`;
        const html = `
            <div class='dish-item flex gap-2 mb-2' id='${dishId}'>
                <select name='Dishes[${dishIndex}].DishId' class='border rounded px-2 py-1 flex-1 dish-select'>
                    <option value=''>Chọn món ăn</option>${dishOptions}
                </select>
                <input type='number' name='Dishes[${dishIndex}].Quantity' class='border rounded px-2 py-1 w-20 dish-quantity' placeholder='Số lượng' min='1' value='1' />
                <button type='button' class='remove-dish text-red-500 text-xl' data-id='${dishId}'>×</button>
            </div>`;
        container.insertAdjacentHTML('beforeend', html);
        dishIndex++;
        updateTotalAmount();
    }

    function removeDish(id) {
        const element = document.getElementById(id);
        if (element) {
            element.remove();
            updateDishIndexes();
            updateTotalAmount();
        }
    }

    // Gán sự kiện động
    document.getElementById('dish-list').addEventListener('input', function (e) {
        if (e.target.classList.contains('dish-quantity')) {
            updateTotalAmount();
        }
    });

    document.getElementById('dish-list').addEventListener('change', function (e) {
        if (e.target.classList.contains('dish-select')) {
            updateTotalAmount();
        }
    });

    document.getElementById('dish-list').addEventListener('click', function (e) {
        if (e.target.classList.contains('remove-dish')) {
            const id = e.target.dataset.id;
            removeDish(id);
        }
    });

    document.getElementById('add-dish').addEventListener('click', addDish);

    document.getElementById('closeOrderModal').addEventListener('click', () => {
        document.getElementById('orderModal').style.display = 'none';
    });

    document.getElementById('cancelOrderModal').addEventListener('click', () => {
        document.getElementById('orderModal').style.display = 'none';
    });

    document.getElementById('orderCreateForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = $(this).serialize(); // giữ jQuery nếu bạn cần
        $.ajax({
            url: '/Orders/Create',
            type: 'POST',
            data: formData,
            success: function (resp) {
                if (resp.success) {
                    alert('Tạo đơn thành công!');
                    location.reload();
                } else {
                    alert(resp.message || 'Có lỗi xảy ra');
                }
            },
            error: function () {
                alert('Có lỗi xảy ra khi gửi dữ liệu!');
            }
        });
    });

    updateTotalAmount();
});
</script>
