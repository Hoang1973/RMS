@model RMS.Models.OrderViewModel
@using RMS.Data.Entities

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Order</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="CustomerId" class="control-label"></label>
                <input asp-for="CustomerId" class="form-control" />
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TableId" class="control-label">Select Table</label>
                <select asp-for="TableId" class="form-control" asp-items="Model.AvailableTables">
                    <option value="">-- Choose a table --</option>
                </select>
                <span asp-validation-for="TableId" class="text-danger"></span>
            </div>
            <!-- TotalAmount readonly -->
            <div class="form-group">
                <label asp-for="TotalAmount" class="control-label">Total Amount</label>
                <input asp-for="TotalAmount" class="form-control" readonly />
            </div>
            <h4>Dish</h4>
            <div id="dish-list">
                <div class="dish-item" id="dish-0">
                    <select name="Dishs[0].DishId" class="form-control">
                        <option value="">Select Dish</option>
                        @foreach (var item in (IEnumerable<SelectListItem>)ViewData["Dishes"])
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                    <input type="number" name="Dishs[0].QuantityNeeded" class="form-control" placeholder="Quantity" />
                    <button type="button" class="btn btn-danger" onclick="removeDish('dish-0')">Delete</button>
                </div>
            </div>
            <button type="button" onclick="addDish()">[+]Add Dish</button>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let dishIndex = 1; // Start from 1 since 0 is already added

        function addDish() {
            const container = document.getElementById('dish-list');

            // Retrieve dishes list correctly
            let options = `@Html.Raw(Json.Serialize(ViewData["Dishes"]))`;
            let parsedOptions = JSON.parse(options);
            let optionHtml = parsedOptions.map(ing => `<option value="${ing.value}">${ing.text}</option>`).join('');

            const dishId = `dish-${dishIndex}`;

            const html = `
            <div class="dish-item" id="${dishId}">
                <select name="Dishes[${dishIndex}].DishId" class="form-control">
                    <option value="">Select Dish</option>
                    ${optionHtml}
                </select>
                <input type="number" name="Dishes[${dishIndex}].QuantityNeeded" class="form-control" placeholder="Quantity" />
                <button type="button" class="btn btn-danger" onclick="removeDish('${dishId}')">Delete</button>
            </div>`;

            container.insertAdjacentHTML('beforeend', html);
            dishIndex++;
        }

        function removeDish(id) {
            const element = document.getElementById(id);
            if (element) {
                element.remove();
                updateDishIndexes();
            }
        }
        function updateDishIndexes() {
            const container = document.getElementById('dish-list');
            const dishItems = container.getElementsByClassName('dish-item');

            for (let i = 0; i < dishItems.length; i++) {
                let item = dishItems[i];
                item.id = `dish-${i}`; // Update ID

                // Update name attributes to ensure ASP.NET receives sequential data
                let select = item.querySelector("select");
                let input = item.querySelector("input");
                let button = item.querySelector("button");

                select.name = `Dishes[${i}].DishId`;
                input.name = `Dishes[${i}].QuantityNeeded`;
                button.setAttribute("onclick", `removeDish('dish-${i}')`);
            }
        }
    </script>

    <!-- Script mới để tính TotalAmount -->
    <script>
        const dishPrices = @Html.Raw(TempData["DishPrices"] ?? "[]");

        function calculateTotalAmount() {
            let total = 0;
            const dishItems = document.querySelectorAll('.dish-item');

            dishItems.forEach(item => {
                const dishId = item.querySelector('select').value;
                const quantity = parseInt(item.querySelector('input').value) || 0;

                if (dishId) {
                    const dish = dishPrices.find(d => d.Id == dishId);
                    if (dish) total += dish.Price * quantity;
                }
            });

            document.getElementById('totalAmount').value = total.toFixed(2);
        }

        document.addEventListener('DOMContentLoaded', () => {
            const selects = document.querySelectorAll('.dish-item select');
            const quantities = document.querySelectorAll('.dish-item input');

            selects.forEach(select => select.addEventListener('change', calculateTotalAmount));
            quantities.forEach(input => input.addEventListener('input', calculateTotalAmount));

            calculateTotalAmount();
        });

        const originalAddDish = addDish;
        addDish = function() {
            originalAddDish();
            const newSelect = document.querySelector(`#dish-${dishIndex - 1} select`);
            const newQuantity = document.querySelector(`#dish-${dishIndex - 1} input`);
            newSelect.addEventListener('change', calculateTotalAmount);
            newQuantity.addEventListener('input', calculateTotalAmount);
            calculateTotalAmount();
        };

        const originalRemoveDish = removeDish;
        removeDish = function(id) {
            originalRemoveDish(id);
            calculateTotalAmount();
        };
    </script>
}
