@model RMS.Models.DashboardViewModel
@using static RMS.Data.Entities.Order
@using static RMS.Data.Entities.Table
@using RMS.Hubs
@using RMS.Data.Entities
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6 text-gray-800">Dashboard</h1>

    <!-- Thống kê cơ bản -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <!-- Tổng doanh thu -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-500">
                    <i class="fas fa-calendar text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Tổng doanh thu</p>
                    <p class="text-2xl font-semibold" data-stat="total-revenue">0 VNĐ</p>
                </div>
            </div>
        </div>

        <!-- Tổng đơn hàng -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-500">
                    <i class="fas fa-shopping-cart text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Tổng đơn hàng</p>
                    <p class="text-2xl font-semibold" data-stat="total-orders">0</p>
                </div>
            </div>
        </div>

        <!-- Bàn trống -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-500">
                    <i class="fas fa-chair text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Bàn trống</p>
                    <p class="text-2xl font-semibold" data-stat="available-tables">0</p>
                </div>
            </div>
        </div>

        <!-- Nguyên liệu sắp hết -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-red-100 text-red-500">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Nguyên liệu sắp hết</p>
                    <p class="text-2xl font-semibold" data-stat="low-stock-ingredients">0</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Chi tiết nguyên liệu sắp hết -->
    @if (Model.LowStockIngredients.Any())
    {
        <div class="bg-white rounded-lg shadow mb-8">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-red-600">Chi tiết nguyên liệu sắp hết</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tên nguyên liệu</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Số lượng</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Đơn vị</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Loại</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200" id="low-stock-ingredients">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Thống kê doanh thu -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Doanh thu theo thời gian -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-lg font-semibold mb-4">Doanh thu theo thời gian</h2>
            <div class="space-y-4">
                <div>
                    <p class="text-sm text-gray-500">Hôm nay</p>
                    <p class="text-xl font-semibold" data-stat="daily-revenue">0 VNĐ</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Tuần này</p>
                    <p class="text-xl font-semibold" data-stat="weekly-revenue">0 VNĐ</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Tháng này</p>
                    <p class="text-xl font-semibold" data-stat="monthly-revenue">0 VNĐ</p>
                </div>
            </div>
        </div>

        <!-- Biểu đồ doanh thu -->
        <div class="bg-white rounded-lg shadow p-6 lg:col-span-2">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold">Doanh thu theo thời gian</h2>
                <div class="flex space-x-2">
                    <button onclick="updateChart('daily')" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Ngày</button>
                    <button onclick="updateChart('weekly')" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Tuần</button>
                    <button onclick="updateChart('monthly')" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Tháng</button>
                </div>
            </div>
            <div class="h-64">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Món ăn bán chạy và Đơn hàng gần đây -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Món ăn bán chạy -->
        <div class="bg-white rounded-lg shadow">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold">Món ăn bán chạy</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tên món</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Số lượng</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Doanh thu</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200" id="top-dishes">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Đơn hàng gần đây -->
        <div class="bg-white rounded-lg shadow">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold">Đơn hàng gần đây</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Bàn</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Trạng thái</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Thời gian</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200" id="recent-orders">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Hóa đơn gần đây -->
    <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
            <h2 class="text-lg font-semibold">Hóa đơn gần đây</h2>
        </div>
        <div class="p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Bàn</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tổng tiền</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Thời gian</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200" id="recent-bills">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        let revenueChart;
        let currentPeriod = 'daily';

        // Khởi tạo biểu đồ
        function initChart(data, labels) {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            if (revenueChart) {
                revenueChart.destroy();
            }
            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Doanh thu (VNĐ)',
                        data: data,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        // Cập nhật biểu đồ
        function updateChart(period) {
            currentPeriod = period;
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => {
                if (btn.textContent.toLowerCase() === period) {
                    btn.classList.remove('bg-gray-200', 'text-gray-700');
                    btn.classList.add('bg-blue-500', 'text-white');
                } else {
                    btn.classList.remove('bg-blue-500', 'text-white');
                    btn.classList.add('bg-gray-200', 'text-gray-700');
                }
            });

            fetch(`/Dashboard/GetRevenueData?period=${period}`)
                .then(response => response.json())
                .then(data => {
                    initChart(data.revenues, data.labels);
                })
                .catch(error => {
                    console.error('Error updating chart:', error);
                });
        }

        // Các hàm cập nhật từng phần
        async function updateBasicStats() {
            try {
                const response = await fetch('/Dashboard/GetBasicStats');
                if (!response.ok) throw new Error('Failed to fetch basic stats');
                const stats = await response.json();
                
                document.querySelector('[data-stat="total-revenue"]').textContent = stats.totalRevenue.toLocaleString('vi-VN') + ' VNĐ';
                document.querySelector('[data-stat="total-orders"]').textContent = stats.totalOrdersCount;
                document.querySelector('[data-stat="available-tables"]').textContent = stats.availableTablesCount;
                document.querySelector('[data-stat="low-stock-ingredients"]').textContent = stats.lowStockIngredientsCount;
            } catch (error) {
                console.error('Error updating basic stats:', error);
            }
        }

        async function updateLowStockIngredients() {
            try {
                const response = await fetch('/Dashboard/GetLowStockIngredients');
                if (!response.ok) throw new Error('Failed to fetch low stock ingredients');
                const ingredients = await response.json();
                
                const tbody = document.querySelector('#low-stock-ingredients');
                if (!tbody) return;
                
                tbody.innerHTML = ingredients.map(i => `
                    <tr>
                        <td class="px-4 py-2">${i.name}</td>
                        <td class="px-4 py-2 text-red-600 font-medium">${i.stockQuantity}</td>
                        <td class="px-4 py-2">${i.unit}</td>
                        <td class="px-4 py-2">${i.type}</td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error updating low stock ingredients:', error);
            }
        }

        async function updateRecentOrders() {
            try {
                const response = await fetch('/Dashboard/GetRecentOrders');
                if (!response.ok) throw new Error('Failed to fetch recent orders');
                const orders = await response.json();
                
                const tbody = document.querySelector('#recent-orders');
                if (!tbody) return;
                
                tbody.innerHTML = orders.map(o => {
                    const statusClass = 
                        o.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                        o.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                        o.status === 'Ready' ? 'bg-green-100 text-green-800' :
                        o.status === 'Completed' ? 'bg-gray-100 text-gray-800' :
                        'bg-red-100 text-red-800';
                    
                    return `
                        <tr>
                            <td class="px-4 py-2">${o.tableNumber}</td>
                            <td class="px-4 py-2">
                                <span class="px-2 py-1 text-xs rounded-full ${statusClass}">
                                    ${o.status}
                                </span>
                            </td>
                            <td class="px-4 py-2">${new Date(o.createdAt).toLocaleString('vi-VN')}</td>
                        </tr>
                    `;
                }).join('');
            } catch (error) {
                console.error('Error updating recent orders:', error);
            }
        }

        async function updateRecentBills() {
            try {
                const response = await fetch('/Dashboard/GetRecentBills');
                if (!response.ok) throw new Error('Failed to fetch recent bills');
                const bills = await response.json();
                
                const tbody = document.querySelector('#recent-bills');
                if (!tbody) return;
                
                tbody.innerHTML = bills.map(b => `
                    <tr>
                        <td class="px-4 py-2">${b.tableNumber}</td>
                        <td class="px-4 py-2">${b.totalDue.toLocaleString('vi-VN')} VNĐ</td>
                        <td class="px-4 py-2">${new Date(b.createdAt).toLocaleString('vi-VN')}</td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error updating recent bills:', error);
            }
        }

        async function updateTopDishes() {
            try {
                const response = await fetch('/Dashboard/GetTopDishes');
                if (!response.ok) throw new Error('Failed to fetch top dishes');
                const dishes = await response.json();
                
                const tbody = document.querySelector('#top-dishes');
                if (!tbody) return;
                
                tbody.innerHTML = dishes.map(d => `
                    <tr>
                        <td class="px-4 py-2">${d.name}</td>
                        <td class="px-4 py-2">${d.totalQuantity}</td>
                        <td class="px-4 py-2">${d.totalRevenue.toLocaleString('vi-VN')} VNĐ</td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error updating top dishes:', error);
            }
        }

        async function updateRevenueStats() {
            try {
                const response = await fetch('/Dashboard/GetRevenueStats');
                if (!response.ok) throw new Error('Failed to fetch revenue stats');
                const stats = await response.json();
                
                document.querySelector('[data-stat="daily-revenue"]').textContent = stats.dailyRevenue.toLocaleString('vi-VN') + ' VNĐ';
                document.querySelector('[data-stat="weekly-revenue"]').textContent = stats.weeklyRevenue.toLocaleString('vi-VN') + ' VNĐ';
                document.querySelector('[data-stat="monthly-revenue"]').textContent = stats.monthlyRevenue.toLocaleString('vi-VN') + ' VNĐ';
            } catch (error) {
                console.error('Error updating revenue stats:', error);
            }
        }

        // Hàm khởi tạo dữ liệu ban đầu
        async function initializeDashboard() {
            try {
                await Promise.all([
                    updateBasicStats(),
                    updateLowStockIngredients(),
                    updateRecentOrders(),
                    updateRecentBills(),
                    updateTopDishes(),
                    updateRevenueStats()
                ]);

                // Khởi tạo biểu đồ với dữ liệu ban đầu
                const hourlyData = @Html.Raw(Json.Serialize(Model.HourlyRevenue));
                initChart(
                    hourlyData.map(h => h.revenue),
                    hourlyData.map(h => h.hour + ':00')
                );
            } catch (error) {
                console.error('Error initializing dashboard:', error);
            }
        }

        // SignalR connection
        const dashboardConnection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        // Lắng nghe các event cụ thể
        dashboardConnection.on("OrderChanged", async (data) => {
            // Phát âm thanh thông báo khi có thay đổi real-time
            const sound = new Audio('/sounds/ingredient-notification.mp3');
            sound.play().catch(error => console.log('Error playing sound:', error));

            console.log("Order changed:", data);
            try {
                await Promise.all([
                    updateBasicStats(),
                    updateRecentOrders(),
                    updateTopDishes()
                ]);
            } catch (error) {
                console.error('Error handling OrderChanged event:', error);
            }
        });

        dashboardConnection.on("BillChanged", async (data) => {
            // Phát âm thanh thông báo khi có thay đổi real-time
            const sound = new Audio('/sounds/ingredient-notification.mp3');
            sound.play().catch(error => console.log('Error playing sound:', error));

            console.log("Bill changed:", data);
            try {
                await Promise.all([
                    updateBasicStats(),
                    updateRevenueStats(),
                    updateRecentBills(),
                    updateChart(currentPeriod)
                ]);
            } catch (error) {
                console.error('Error handling BillChanged event:', error);
            }
        });

        dashboardConnection.on("IngredientChanged", async (data) => {
            // Phát âm thanh thông báo khi có thay đổi real-time
            const sound = new Audio('/sounds/ingredient-notification.mp3');
            sound.play().catch(error => console.log('Error playing sound:', error));

            console.log("Ingredient changed:", data);
            try {
                await Promise.all([
                    updateBasicStats(),
                    updateLowStockIngredients()
                ]);
            } catch (error) {
                console.error('Error handling IngredientChanged event:', error);
            }
        });

        dashboardConnection.on("TableChanged", async (data) => {
            // Phát âm thanh thông báo khi có thay đổi real-time
            const sound = new Audio('/sounds/ingredient-notification.mp3');
            sound.play().catch(error => console.log('Error playing sound:', error));

            console.log("Table changed:", data);
            try {
                await updateBasicStats();
            } catch (error) {
                console.error('Error handling TableChanged event:', error);
            }
        });

        // Start SignalR connection và khởi tạo dashboard
        dashboardConnection.start()
            .then(() => {
                console.log("SignalR Connected");
                initializeDashboard();
            })
            .catch(err => {
                console.error("SignalR Connection Error:", err);
                // Retry connection after 5 seconds
                setTimeout(() => {
                    console.log("Retrying SignalR connection...");
                    dashboardConnection.start()
                        .then(() => initializeDashboard())
                        .catch(error => console.error("Failed to reconnect:", error));
                }, 5000);
            });
    </script>
} 