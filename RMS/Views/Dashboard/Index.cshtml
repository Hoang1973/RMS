@model RMS.Models.DashboardViewModel
@using static RMS.Data.Entities.Order
@using static RMS.Data.Entities.Table
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6 text-gray-800">Dashboard</h1>

    <!-- Thống kê cơ bản -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <!-- Tổng doanh thu -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-500">
                    <i class="fas fa-calendar text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Tổng doanh thu</p>
                    <p class="text-2xl font-semibold">@Model.TotalRevenue.ToString("N0") VNĐ</p>
                </div>
            </div>
        </div>

        <!-- Tổng đơn hàng -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-500">
                    <i class="fas fa-shopping-cart text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Tổng đơn hàng</p>
                    <p class="text-2xl font-semibold">@Model.TotalOrdersCount</p>
                </div>
            </div>
        </div>

        <!-- Bàn trống -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-500">
                    <i class="fas fa-chair text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Bàn trống</p>
                    <p class="text-2xl font-semibold">@Model.AvailableTablesCount</p>
                </div>
            </div>
        </div>

        <!-- Nguyên liệu sắp hết -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-red-100 text-red-500">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Nguyên liệu sắp hết</p>
                    <p class="text-2xl font-semibold">@Model.LowStockIngredientsCount</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Chi tiết nguyên liệu sắp hết -->
    @if (Model.LowStockIngredients.Any())
    {
        <div class="bg-white rounded-lg shadow mb-8">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-red-600">Chi tiết nguyên liệu sắp hết</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tên nguyên liệu</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Số lượng</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Đơn vị</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Loại</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var ingredient in Model.LowStockIngredients)
                            {
                                <tr>
                                    <td class="px-4 py-2">@ingredient.Name</td>
                                    <td class="px-4 py-2 text-red-600 font-medium">@ingredient.StockQuantity</td>
                                    <td class="px-4 py-2">@ingredient.Unit</td>
                                    <td class="px-4 py-2">@ingredient.Type</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Thống kê doanh thu -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Doanh thu theo thời gian -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-lg font-semibold mb-4">Doanh thu theo thời gian</h2>
            <div class="space-y-4">
                <div>
                    <p class="text-sm text-gray-500">Hôm nay</p>
                    <p class="text-xl font-semibold">@Model.DailyRevenue.ToString("N0") VNĐ</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Tuần này</p>
                    <p class="text-xl font-semibold">@Model.WeeklyRevenue.ToString("N0") VNĐ</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Tháng này</p>
                    <p class="text-xl font-semibold">@Model.MonthlyRevenue.ToString("N0") VNĐ</p>
                </div>
            </div>
        </div>

        <!-- Biểu đồ doanh thu -->
        <div class="bg-white rounded-lg shadow p-6 lg:col-span-2">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold">Doanh thu theo thời gian</h2>
                <div class="flex space-x-2">
                    <button onclick="updateChart('daily')" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Ngày</button>
                    <button onclick="updateChart('weekly')" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Tuần</button>
                    <button onclick="updateChart('monthly')" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Tháng</button>
                </div>
            </div>
            <div class="h-64">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Món ăn bán chạy và Đơn hàng gần đây -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Món ăn bán chạy -->
        <div class="bg-white rounded-lg shadow">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold">Món ăn bán chạy</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tên món</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Số lượng</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Doanh thu</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var dish in Model.TopDishes)
                            {
                                <tr>
                                    <td class="px-4 py-2">@dish.Name</td>
                                    <td class="px-4 py-2">@dish.TotalQuantity</td>
                                    <td class="px-4 py-2">@dish.TotalRevenue.ToString("N0") VNĐ</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Đơn hàng gần đây -->
        <div class="bg-white rounded-lg shadow">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold">Đơn hàng gần đây</h2>
            </div>
            <div class="p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Bàn</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Trạng thái</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Thời gian</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var order in Model.TotalOrders)
                            {
                                <tr>
                                    <td class="px-4 py-2">@order.TableNumber</td>
                                    <td class="px-4 py-2">
                                        <span class="px-2 py-1 text-xs rounded-full
                                            @(order.Status == OrderStatus.Pending ? "bg-yellow-100 text-yellow-800" :
                                              order.Status == OrderStatus.Processing ? "bg-blue-100 text-blue-800" :
                                              order.Status == OrderStatus.Ready ? "bg-green-100 text-green-800" :
                                              "bg-gray-100 text-gray-800")">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td class="px-4 py-2">@order.CreatedAt?.ToString("dd/MM/yyyy HH:mm")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Hóa đơn gần đây -->
    <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
            <h2 class="text-lg font-semibold">Hóa đơn gần đây</h2>
        </div>
        <div class="p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Bàn</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tổng tiền</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Thời gian</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var bill in Model.RecentBills)
                        {
                            <tr>
                                <td class="px-4 py-2">@bill.TableNumber</td>
                                <td class="px-4 py-2">@bill.TotalDue.ToString("N0") VNĐ</td>
                                <td class="px-4 py-2">@bill.CreatedAt?.ToString("dd/MM/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let revenueChart;
        let currentPeriod = 'daily';

        // Khởi tạo biểu đồ
        function initChart(data, labels) {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            if (revenueChart) {
                revenueChart.destroy();
            }
            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Doanh thu (VNĐ)',
                        data: data,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        // Cập nhật biểu đồ
        function updateChart(period) {
            currentPeriod = period;
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => {
                btn.classList.remove('bg-blue-500', 'text-white');
                btn.classList.add('bg-gray-200', 'text-gray-700');
            });
            event.target.classList.remove('bg-gray-200', 'text-gray-700');
            event.target.classList.add('bg-blue-500', 'text-white');

            fetch(`/Dashboard/GetRevenueData?period=${period}`)
                .then(response => response.json())
                .then(data => {
                    initChart(data.revenues, data.labels);
                });
        }

        // Khởi tạo biểu đồ ban đầu
        const hourlyData = @Html.Raw(Json.Serialize(Model.HourlyRevenue));
        initChart(
            hourlyData.map(h => h.revenue),
            hourlyData.map(h => h.hour + ':00')
        );

        // SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        connection.on("DataChanged", (data) => {
            // Refresh the page when data changes
            location.reload();
        });

        connection.start().catch(err => console.error(err));
    </script>
} 